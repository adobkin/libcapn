CMAKE_MINIMUM_REQUIRED (VERSION 2.8.5)
SET(CAPN_LIB_NAME "capn")
PROJECT("libcapn" C)

SET(CMAKE_VERBOSE_MAKEFILE ON)

# Options
OPTION (BUILD_SHARED_LIBS "Build shared libraries." ON)

SET(CAPN_VERSION_MAJOR 1)
SET(CAPN_VERSION_MINOR 1)
SET(CAPN_VERSION_PATCH 0)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMake")

INCLUDE (CheckFunctionExists)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckSymbolExists)
INCLUDE (CheckTypeSize)

SET(CAPN_VERSION "${CAPN_VERSION_MAJOR}.${CAPN_VERSION_MINOR}.${CAPN_VERSION_PATCH}")
SET(PROJECT_VERSION ${CAPN_VERSION})

SET(CMAKE_C_FLAGS "-std=c99")

IF(CMAKE_COMPILER_IS_GNUCC)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_BSD_SOURCE -Wall -Wextra -Wimplicit")
    SET(CMAKE_C_FLAGS_RELEASE "")
ELSE(CMAKE_COMPILER_IS_GNUCC)

ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(NOT DEFINED CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    SET(OS_LINUX TRUE)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

IF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    SET(OS_FREEBSD TRUE)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")

INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/src")
INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}")
INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}/src")

CHECK_INCLUDE_FILES (ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILES (inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES (stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILES (netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CAPN_ARCH_STR "x86_64")
    SET(CAPN_ARCH_X86_64 TRUE)
ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(CAPN_ARCH_STR "x86")
    SET(CAPN_ARCH_X86_64 FALSE)
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

INCLUDE(ExternalProject)

ExternalProject_Add(
    jansson
    #SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    GIT_REPOSITORY git://github.com/akheron/jansson.git
    BINARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    INSTALL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/jansson"
    CMAKE_COMMAND cmake .
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)

INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/jansson")
INCLUDE_DIRECTORIES ("${CMAKE_CURRENT_SOURCE_DIR}/jansson/include")

CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/platform.h.cmake" "${PROJECT_BINARY_DIR}/src/platform.h")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/src/version.h.cmake" "${PROJECT_BINARY_DIR}/src/version.h")

IF(UNIX)
    INCLUDE (FindOpenSSL)
    IF(NOT OPENSSL_FOUND)
	MESSAGE(FATAL_ERROR "openssl is not found!")
    ENDIF()
    INCLUDE_DIRECTORIES ( ${OPENSSL_INCLUDE_DIRS} )
    
    IF(NOT DEFINED CMAKE_INSTALL_PREFIX)
	SET(CMAKE_INSTALL_PREFIX "/usr")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_LIB)
	SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_INCLUDES)
	SET(CAPN_INSTALL_PATH_INCLUDES "${CMAKE_INSTALL_PREFIX}/include/${CAPN_LIB_NAME}"  CACHE PATH "")
    ENDIF()    

    IF(NOT DEFINED CAPN_INSTALL_PATH_LIB)
	SET(CAPN_INSTALL_PATH_BIN "${CMAKE_INSTALL_PREFIX}/bin"  CACHE PATH "")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_PKGCONFIG)
	SET(CAPN_INSTALL_PATH_PKGCONFIG "${CMAKE_INSTALL_PREFIX}/share/pkgconfig"  CACHE PATH "")
    ENDIF()

    IF(NOT DEFINED CAPN_INSTALL_PATH_SYSCONFIG)
	SET(CAPN_INSTALL_PATH_SYSCONFIG "/etc"  CACHE PATH "")
    ENDIF()

    IF(LIB_SUFFIX)
        SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}")
    ELSE(LIB_SUFFIX)
        IF(CAPN_ARCH_X86_64 AND OS_LINUX)
            IF(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64" AND IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib64")
                SET(CAPN_INSTALL_PATH_LIB "${CMAKE_INSTALL_PREFIX}/lib64")
            ENDIF(EXISTS "${CMAKE_INSTALL_PREFIX}/lib64" AND IS_DIRECTORY "${CMAKE_INSTALL_PREFIX}/lib64")
        ENDIF(CAPN_ARCH_X86_64 AND OS_LINUX)
    ENDIF(LIB_SUFFIX)
    
    SET(CAPN_INSTALL_PATH_LIB "${CAPN_INSTALL_PATH_LIB}/${CAPN_LIB_NAME}")
    SET(CAPN_PKGCONF_FILE_NAME "libcapn.pc")
    CONFIGURE_FILE("${CAPN_PKGCONF_FILE_NAME}.cmake" ${PROJECT_BINARY_DIR}/${CAPN_PKGCONF_FILE_NAME})

    INSTALL(FILES ${PROJECT_BINARY_DIR}/${CAPN_PKGCONF_FILE_NAME} DESTINATION ${CAPN_INSTALL_PATH_PKGCONFIG})
    
    IF(DEFINED OS_LINUX)
	    SET(CAPN_LDCONF_FILE_NAME "libcapn-${CAPN_VERSION}-${CAPN_ARCH_STR}.conf")
	    MARK_AS_ADVANCED(CAPN_LDCONF_FILE_NAME)
	    
	    CONFIGURE_FILE(libcapn.ld.conf.cmake ${PROJECT_BINARY_DIR}/${CAPN_LDCONF_FILE_NAME})
	
	    IF(EXISTS "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d" AND IS_DIRECTORY "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d")
	        INSTALL(FILES ${PROJECT_BINARY_DIR}/${CAPN_LDCONF_FILE_NAME} DESTINATION "${CAPN_INSTALL_PATH_SYSCONFIG}/ld.so.conf.d")
	    ENDIF()
    ENDIF()

ENDIF(UNIX)

FILE (GLOB JANSSON_SOURCE_FILES jansson/src/*.c)

SET(CAPN_SOURCE_FILES
    src/apn.c
    src/apn_strings.c
    ${JANSSON_SOURCE_FILES}
)

SET(CAPN_PUBLIC_HEADER_FILES
    src/apn.h
    ${PROJECT_BINARY_DIR}/src/platform.h
    ${PROJECT_BINARY_DIR}/src/version.h 
)

IF(DEFINED WIN32)
    SET(CAPN_INSTALL_DIR ${PROJECT_BINARY_DIR}/capn-bin)
    SET(CAPN_INSTALL_PATH_LIB ${CAPN_INSTALL_DIR}/lib)
    SET(CAPN_INSTALL_PATH_INCLUDES ${CAPN_INSTALL_DIR}/include)
    SET(CAPN_INSTALL_PATH_BIN ${CAPN_INSTALL_DIR}/bin)
	
    IF (MINGW)
        # resource compilation for MinGW
        ADD_CUSTOM_COMMAND ( OUTPUT ${PROJECT_BINARY_DIR}/rc_capn.obj
        COMMAND windres.exe -I${CMAKE_CURRENT_SOURCE_DIR} -i${CMAKE_CURRENT_SOURCE_DIR}/win/capn.rc
                -o ${PROJECT_BINARY_DIR}/rc_capn.obj )
        LIST(APPEND SOURCE_FILES rc_capn.obj)
    ELSE(MINGW)
	LIST(APPEND CAPN_SOURCE_FILES win/capn.rc)
    ENDIF(MINGW)
	
    FILE (GLOB OPENSSL_HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/include/openssl/*.h)
    INSTALL(FILES ${OPENSSL_HEADER_FILES} DESTINATION ${CAPN_INSTALL_PATH_INCLUDES}/openssl)

    INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/include")
    SET(OPENSSL_LIBRARIES "${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/lib/ssleay32.lib")

    CONFIGURE_FILE(win/createpkg.bat.cmake win/createpkg.bat)

    INSTALL(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/bin/ssleay32.dll
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/bin/libeay32.dll
          DESTINATION ${CAPN_INSTALL_PATH_BIN})
          
    INSTALL(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/lib/ssleay32.lib
          ${CMAKE_CURRENT_SOURCE_DIR}/win/thirdparty/openssl/lib/libeay32.lib
          DESTINATION ${CAPN_INSTALL_PATH_LIB})
          
    INSTALL(FILES
          ${CMAKE_CURRENT_SOURCE_DIR}/README.md
          ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE
          DESTINATION ${CAPN_INSTALL_DIR})
    	ADD_CUSTOM_TARGET(zip COMMAND ${PROJECT_BINARY_DIR}/win/createpkg.bat)
ENDIF(DEFINED WIN32)

IF(BUILD_SHARED_LIBS)
    ADD_LIBRARY(${CAPN_LIB_NAME} SHARED ${CAPN_SOURCE_FILES})
ELSE(BUILD_SHARED_LIBS)
    ADD_LIBRARY(${CAPN_LIB_NAME} STATIC ${CAPN_SOURCE_FILES})
ENDIF(BUILD_SHARED_LIBS)

TARGET_LINK_LIBRARIES(${CAPN_LIB_NAME} ${OPENSSL_LIBRARIES})

IF(DEFINED WIN32)
TARGET_LINK_LIBRARIES(${CAPN_LIB_NAME} Ws2_32.lib)
ENDIF(DEFINED WIN32)

SET_TARGET_PROPERTIES(${CAPN_LIB_NAME} PROPERTIES
    VERSION ${CAPN_VERSION} SOVERSION ${CAPN_VERSION_MAJOR}
    CLEAN_DIRECT_OUTPUT 1	# for cmake 2.6.x and lower
)
ADD_DEPENDENCIES(${CAPN_LIB_NAME} jansson)

INSTALL(TARGETS ${CAPN_LIB_NAME}
         RUNTIME DESTINATION ${CAPN_INSTALL_PATH_BIN}
         LIBRARY DESTINATION ${CAPN_INSTALL_PATH_LIB}
         ARCHIVE DESTINATION ${CAPN_INSTALL_PATH_LIB}
)

INSTALL(FILES ${CAPN_PUBLIC_HEADER_FILES} DESTINATION ${CAPN_INSTALL_PATH_INCLUDES})

MESSAGE(STATUS "Project: ${PROJECT_NAME}")
MESSAGE(STATUS "Cmake version: ${CMAKE_VERSION}")
MESSAGE(STATUS "System: ${CMAKE_SYSTEM}")
MESSAGE(STATUS "Processor:  ${CMAKE_HOST_SYSTEM_PROCESSOR}")
MESSAGE(STATUS "Using CFLAGS: ${CMAKE_C_FLAGS}")

